#!/bin/bash
# The MIT License (MIT)
#
# Copyright (c) 2018 Jesper Pedersen <jesper.pedersen@redhat.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software
# is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

REGEX_IDENTIFIER='^[a-zA-Z_][a-zA-Z0-9_]*$'
REGEX_PASSWORD='^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$'
REGEX_NUMBER='^[1-9][0-9]*$'

function usage() {
  if [ $# == 1 ]; then
    echo >&2 "error: $1"
  fi

  cat >&2 <<EOF
Required environment variables:
  PG_MASTER ($PG_MASTER)
  PG_REPLICATION_NAME ($PG_REPLICATION_NAME) (regex: '$REGEX_IDENTIFIER')
  PG_REPLICATION_PASSWORD ($PG_REPLICATION_PASSWORD) (regex: '$REGEX_PASSWORD')

For more information visit https://github.com/jesperpedersen/openshift-pgsql
EOF
  exit 1
}

# Generate passwd file based on current uid
function generate_passwd_file() {
  export USER_ID=$(id -u)
  export GROUP_ID=$(id -g)
  grep -v ^postgres /etc/passwd > "$HOME/passwd"
  echo "postgres:x:${USER_ID}:${GROUP_ID}:PostgreSQL Server:/pgdata:/bin/bash" >> "$HOME/passwd"
  export LD_PRELOAD='/usr/lib64/libnss_wrapper.so'
  export NSS_WRAPPER_PASSWD=$HOME/passwd
  export NSS_WRAPPER_GROUP=/etc/group
}

generate_passwd_file

if [ ! -f /pgdata/data/PG_VERSION ]; then
    export PG_MASTER=${PG_MASTER}
    export PG_REPLICATION_NAME=${PG_REPLICATION_NAME}
    export PG_REPLICATION_PASSWORD=${PG_REPLICATION_PASSWORD}

    if [ -z "${PG_MASTER}" ] ||
       [ -z "${PG_REPLICATION_NAME}" ] || [ -z "${PG_REPLICATION_PASSWORD}" ]; then
        echo "PG_MASTER, PG_REPLICATION_NAME and PG_REPLICATION_PASSWORD needs to be defined."
        exit 1
    fi

    [[ "${PG_REPLICATION_NAME}" =~ $REGEX_IDENTIFIER ]] || usage
    [[ "${PG_REPLICATION_PASSWORD}" =~ $REGEX_PASSWORD ]] || usage

    [ ${#PG_REPLICATION_NAME} -le 63 ] || usage "PostgreSQL replication name too long (maximum 63 characters)"

    if [ -f /pgconf/data/root.crt ] && [ -f /pgconf/data/postgresql.crt ] && [ -f /pgconf/data/postgresql.key ]; then
        mkdir ~/.postgresql
        cp /pgconf/data/root.crt ~/.postgresql
        cp /pgconf/data/postgresql.crt ~/.postgresql
        cp /pgconf/data/postgresql.key ~/.postgresql
        chmod 0600 ~/.postgresql/postgresql.key

        sed -i "s/SSL/ sslmode=verify-ca/g" /conf/recovery.conf
    else
        sed -i "s/SSL//g" /conf/recovery.conf
    fi

    mkdir /pgdata/data/

    PGPASSWORD="$PG_REPLICATION_PASSWORD" /usr/pgsql-10/bin/pg_basebackup -X stream --no-password -c fast -h ${PG_MASTER} -U ${PG_REPLICATION_NAME} -D /pgdata/data/

    sed -i "s/PG_MASTER/$PG_MASTER/g" /conf/recovery.conf
    sed -i "s/PG_REPLICATION_NAME/$PG_REPLICATION_NAME/g" /conf/recovery.conf
    sed -i "s/PG_REPLICATION_PASSWORD/$PG_REPLICATION_PASSWORD/g" /conf/recovery.conf

    cp /conf/recovery.conf /pgdata/data/

    mkdir /pgbackup/data/

    /usr/pgsql-10/bin/pg_ctl -D /pgdata/data/ start
    /usr/bin/pgbackrest --stanza=main stanza-create
    /usr/pgsql-10/bin/pg_ctl -D /pgdata/data/ stop
fi

exec /usr/pgsql-10/bin/postgres -D /pgdata/data/ "$@"
